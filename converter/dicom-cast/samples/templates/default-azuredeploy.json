{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "serviceName": {
            "minLength": 3,
            "maxLength": 24,
            "type": "String",
            "metadata": {
                "description": "Name of the DICOM Cast service container group."
            }
        },
        "image": {
            "defaultValue": "dicomoss.azurecr.io/linux_dicom-cast",
            "type": "String",
            "metadata": {
                "description": "Container image to deploy. Should be of the form repoName/imagename:tag for images stored in public Docker Hub, or a fully qualified URI for other registries. Images from private registries require additional registry credentials."
            }
        },
        "storageAccountSku": {
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
            ],
            "type": "String"
        },
        "deployApplicationInsights": {
            "defaultValue": true,
            "type": "Bool",
            "metadata": {
                "description": "Deploy Application Insights for the DICOM server. Disabled for Microsoft Azure Government (MAG)"
            }
        },
        "applicationInsightsLocation": {
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "southeastasia",
                "northeurope",
                "westeurope",
                "eastus",
                "southcentralus",
                "westus2"
            ],
            "type": "String"
        },
        "cpuCores": {
            "defaultValue": "1.0",
            "type": "String",
            "metadata": {
                "description": "The number of CPU cores to allocate to the container."
            }
        },
        "memoryInGb": {
            "defaultValue": "1.5",
            "type": "String",
            "metadata": {
                "description": "The amount of memory to allocate to the container in gigabytes."
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "String",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "restartPolicy": {
            "defaultValue": "always",
            "allowedValues": [
                "never",
                "always",
                "onfailure"
            ],
            "type": "String",
            "metadata": {
                "description": "The behavior of Azure runtime if container has stopped."
            }
        },
        "dicomWebEndpoint": {
            "type": "string",
            "metadata": {
                "description": "The endpoint of the DICOM Web server."
            }
        },
        "fhirEndpoint": {
            "type": "string",
            "metadata": {
                "description": "The endpoint of the FHIR server."
            }
        },
        "enforceValidationOfTagValues": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enforce validation of all tag values and do not store to FHIR even if only non-required tags are invalid"
            }
        }
    },
    "variables": {
        "isMAG": "[or(contains(resourceGroup().location,'usgov'),contains(resourceGroup().location,'usdod'))]",
        "serviceName": "[toLower(parameters('serviceName'))]",
        "containerGroupResourceId": "[resourceId('Microsoft.ContainerInstance/containerGroups/', variables('serviceName'))]",
        "deployAppInsights": "[and(parameters('deployApplicationInsights'),not(variables('isMAG')))]",
        "appInsightsName": "[concat('AppInsights-', variables('serviceName'))]",
        "storageAccountName": "[concat(substring(replace(variables('serviceName'), '-', ''), 0, min(11, length(variables('serviceName')))), uniquestring(resourceGroup().id))]",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "keyVaultEndpoint": "[if(variables('isMAG'), concat('https://', variables('serviceName'), '.vault.usgovcloudapi.net/'), concat('https://', variables('serviceName'), '.vault.azure.net/'))]",
        "keyVaultResourceId": "[resourceId('Microsoft.KeyVault/vaults', variables('serviceName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.ContainerInstance/containerGroups",
            "apiVersion": "2018-10-01",
            "name": "[variables('serviceName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Insights/components/', variables('appInsightsName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "containers": [
                    {
                        "name": "[variables('serviceName')]",
                        "properties": {
                            "image": "[parameters('image')]",
                            "resources": {
                                "requests": {
                                    "cpu": "[parameters('cpuCores')]",
                                    "memoryInGb": "[parameters('memoryInGb')]"
                                }
                            },
                            "environmentVariables": [
                                {
                                    "name": "Fhir__Endpoint",
                                    "value": "[parameters('fhirEndpoint')]"
                                },
                                {
                                    "name": "DicomWeb__Endpoint",
                                    "value": "[parameters('dicomWebEndpoint')]"
                                },
                                {
                                    "name": "KeyVault__Endpoint",
                                    "value": "[variables('keyVaultEndpoint')]"
                                },
                                {
                                    "name": "ApplicationInsights__InstrumentationKey",
                                    "value": "[if(variables('deployAppInsights'), reference(concat('Microsoft.Insights/components/', variables('appInsightsName'))).InstrumentationKey, '')]"
                                },
                                {
                                    "name": "DicomCast__Features__EnforceValidationOfTagValues",
                                    "value": "[parameters('enforceValidationOfTagValues')]"

                                }
                            ]
                        }
                    }
                ],
                "osType": "Linux",
                "restartPolicy": "[parameters('restartPolicy')]"
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2015-05-01",
            "name": "[variables('appInsightsName')]",
            "location": "[parameters('applicationInsightsLocation')]",
            "tags": {
                "[concat('hidden-link:', variables('containerGroupResourceId'))]": "Resource",
                "displayName": "AppInsightsComponent"
            },
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('serviceName')]"
            },
            "condition": "[variables('deployAppInsights')]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "tags": {},
            "sku": {
                "name": "[parameters('storageAccountSku')]"
            },
            "kind": "StorageV2",
            "properties": {
                "accessTier": "Hot",
                "supportsHttpsTrafficOnly": "true"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2015-06-01",
            "name": "[variables('serviceName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('containerGroupResourceId')]"
            ],
            "tags": {},
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "tenantId": "[reference(variables('containerGroupResourceId'), '2018-10-01', 'Full').Identity.tenantId]",
                "accessPolicies": [
                    {
                        "tenantId": "[reference(variables('containerGroupResourceId'), '2018-10-01', 'Full').Identity.tenantId]",
                        "objectId": "[reference(variables('containerGroupResourceId'), '2018-10-01', 'Full').Identity.principalId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list",
                                "set"
                            ]
                        }
                    }
                ],
                "enabledForDeployment": false
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2015-06-01",
            "name": "[concat(variables('serviceName'), '/TableStore--ConnectionString')]",
            "dependsOn": [
                "[variables('keyVaultResourceId')]",
                "[variables('storageResourceId')]"
            ],
            "properties": {
                "contentType": "text/plain",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';')]"
            }
        }
    ],
    "outputs": {
        "containerTenantId": {
            "type": "string",
            "value": "[reference(variables('containerGroupResourceId'), '2018-10-01', 'Full').Identity.tenantId]"
        },
        "containerPrincipalId": {
            "type": "string",
            "value": "[reference(variables('containerGroupResourceId'), '2018-10-01', 'Full').Identity.principalId]"
        }
    }
}
